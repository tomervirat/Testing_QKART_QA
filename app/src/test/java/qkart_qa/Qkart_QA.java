/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package qkart_qa;

import qkart_qa.pages.Register;
import qkart_qa.pages.Login;
import qkart_qa.pages.Checkout;
import qkart_qa.pages.Home;
import qkart_qa.pages.SearchResult;
import java.util.Arrays;
import java.util.List;
import java.util.Set;

import org.testng.Assert;
import org.testng.annotations.*;
import static org.testng.Assert.*;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.WindowType;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import io.github.bonigarcia.wdm.WebDriverManager;
import java.net.MalformedURLException;
import java.time.Duration;

public class Qkart_QA {
        static WebDriver driver; // Variable to store the instance of WebDriver
        private static String lastGeneratedUserName; // Variable to store the username of last registered user
        private static WebDriverWait wait; // Variable to store the instance of Wait

        /*
         * Create the WebDriver instance and launch the browser using Zalenium.
         */
        @BeforeSuite(alwaysRun = true)
        public static void createDriver() throws MalformedURLException {
                WebDriverManager.chromedriver().setup();
                ChromeOptions options = new ChromeOptions();
                options.addArguments("--start-maximized"); // Maximize the browser window
                driver = new ChromeDriver(options);
                // Setup the EdgeDriver using WebDriverManager
                // Set implicit wait (wait for up to 10 seconds)
                driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
                wait = new WebDriverWait(driver, Duration.ofSeconds(5));
        }

        /*
         * Testcase01: Verify the functionality of Login button on the Home page
         */
        @Test(description = "Verify registration happens correctly", priority = 1, groups = {
                        "Sanity_test" }, dataProvider = "data-provider", dataProviderClass = DP.class)
        @Parameters({ "TC1_Username", "TC1_Password" })
        public void TestCase01(@Optional("testUser") String TC1_Username, @Optional("abc@123") String TC1_Password)
                        throws InterruptedException {
                Boolean status;
                Register register = new Register(driver);
                register.navigateToRegisterPage();
                status = register.registerUser(TC1_Username, TC1_Password, true);
                assertTrue(status, "Failed to register new user");
                Login login = new Login(driver);
                login.navigateToLoginPage();
                lastGeneratedUserName = register.lastGeneratedUsername;
                status = login.PerformLogin(lastGeneratedUserName, TC1_Password);
                assertTrue(status, "Failed to login new user");
        }

        /*
         * Testcase02: Verify that an existing user is not allowed to re-register on
         * QKart
         */
        @Test(description = "Verify re-registering an already registered user fails", priority = 2, groups = {
                        "Sanity_test" }, dataProvider = "data-provider", dataProviderClass = DP.class)
        @Parameters({ "TC2_Username", "TC2_Password" })
        public void TestCase02(@Optional("testUser") String TC2_Username, @Optional("abc@123") String TC2_Password)
                        throws InterruptedException {
                Boolean status;
                Register register = new Register(driver);
                register.navigateToRegisterPage();
                status = register.registerUser(TC2_Username, TC2_Password, true);
                assertTrue(status, "Failed to register new user");
                lastGeneratedUserName = register.lastGeneratedUsername;
                register.navigateToRegisterPage();
                status = register.registerUser(lastGeneratedUserName, TC2_Password, false);
                assertFalse(status, "Reregistration of a new user succeeded");

        }

        /*
         * Testcase03: Verify the functinality of the search text box
         */
        @Test(description = "Verify the functionality of search text box", priority = 3, groups = {
                        "Sanity_test" }, dataProvider = "data-provider", dataProviderClass = DP.class)
        @Parameters("TC3_ProductNameToSearchFor")
        public void TestCase03(String TC3_ProductNameToSearchFor)
                        throws InterruptedException {
                Boolean status;
                Home home = new Home(driver);
                home.navigateToHomePage();
                status = home.searchForProduct(TC3_ProductNameToSearchFor);
                assertTrue(status, "Search for product failed");
                // Fetch the search results
                List<WebElement> searchResults = home.getSearchResults();
                assertFalse(searchResults.size() == 0, "No product found for yonex");
                for (WebElement webElement : searchResults) {
                        // Create a SearchResult object from the parent element
                        SearchResult resultelement = new SearchResult(webElement);

                        // Verify that all results contain the searched text
                        String elementText = resultelement.getTitleofResult();
                        assertTrue(elementText.contains(TC3_ProductNameToSearchFor),
                                        "Test Results contains un-expected values: YONEX Smash Badminton Racquet");
                }

                status = home.searchForProduct("Gesundheit");
                // Verify no search results are found
                searchResults = home.getSearchResults();

                status = searchResults.size() == 0;
                assertTrue(status, "Expected: no results, Actual: Results were available");

        }

        /*
         * Testcase04: Verify the presence of size chart and check if the size chart
         * content is as
         * expected
         */
        @Test(description = "Verify the existence of size chart for certain items and validate contents of size chart", priority = 4, groups = {
                        "Regression_Test"
        }, dataProvider = "data-provider", dataProviderClass = DP.class)
        @Parameters("TC4_ProductNameToSearchFor")
        public void TestCase04(String TC4_ProductNameToSearchFor)
                        throws InterruptedException {
                Boolean status;
                Home home = new Home(driver);
                home.navigateToHomePage();
                home.searchForProduct(TC4_ProductNameToSearchFor);
                List<WebElement> searchResults = home.getSearchResults();
                // Create expected values
                List<String> expectedTableHeaders = Arrays.asList("Size", "UK/INDIA", "EU", "HEEL TO TOE");
                List<List<String>> expectedTableBody = Arrays.asList(Arrays.asList("6", "6", "40", "9.8"),
                                Arrays.asList("7", "7", "41", "10.2"), Arrays.asList("8", "8", "42", "10.6"),
                                Arrays.asList("9", "9", "43", "11"), Arrays.asList("10", "10", "44", "11.5"),
                                Arrays.asList("11", "11", "45", "12.2"), Arrays.asList("12", "12", "46", "12.6"));
                // Verify size chart presence and content matching for each search result
                for (WebElement webElement : searchResults) {
                        SearchResult result = new SearchResult(webElement);

                        // Verify if the size chart exists for the search result
                        status = result.verifySizeChartExists();
                        assertTrue(status, "Size chart link does not exist");
                        // Verify if size dropdown exists
                        status = result.verifyExistenceofSizeDropdown(driver);
                        assertTrue(status, "Size dropdown doesn't exist");
                        // Open the size chart
                        status = result.openSizechart(driver);
                        assertTrue(status, "Failed to open Size Chart");
                        // Verify if the size chart contents matches the expected values
                        status = result.validateSizeChartContents(expectedTableHeaders, expectedTableBody, driver);
                        assertTrue(status, "Failure while validating contents of Size Chart Link");
                        // Close the size chart modal
                        status = result.closeSizeChart(driver);
                        assertTrue(status, "Closing size chart failed");
                }
        }

        /*
         * Testcase05: Verify the complete flow of checking out and placing order for
         * products is
         * working correctly
         */
        @Test(description = "Verify that a new user can add multiple products in to the cart and Checkout", priority = 5, groups = {
                        "Sanity_test" }, dataProvider = "data-provider", dataProviderClass = DP.class)
        @Parameters({ "TC5_ProductNameToSearchFor", "TC5_ProductNameToSearchFor2",
                        "TC5_AddressDetails" })
        public void TestCase05(String TC5_ProductNameToSearchFor, String TC5_ProductNameToSearchFor2,
                        String TC5_AddressDetails)
                        throws InterruptedException {
                Boolean status;
                Register register = new Register(driver);
                register.navigateToRegisterPage();
                status = register.registerUser("testuser", "testuser@123", true);
                assertTrue(status, "Failed to register new user");
                Login login = new Login(driver);
                login.navigateToLoginPage();
                lastGeneratedUserName = register.lastGeneratedUsername;
                status = login.PerformLogin(lastGeneratedUserName, "testuser@123");
                assertTrue(status, "Failed to login new user");
                Home home = new Home(driver);
                home.navigateToHomePage();
                status = home.searchForProduct(TC5_ProductNameToSearchFor);
                assertTrue(status, "Search for product failed");
                status = home.addProductToCart(TC5_ProductNameToSearchFor);
                assertTrue(status, "Failed to add product to cart");
                status = home.searchForProduct(TC5_ProductNameToSearchFor2);
                assertTrue(status, "Search for product failed");
                status = home.addProductToCart(TC5_ProductNameToSearchFor2);
                assertTrue(status, "Failed to add product to cart");
                status = home.clickCheckout();
                assertTrue(status, "Failed to click on checkout button");
                Checkout checkout = new Checkout(driver);
                status = checkout.addNewAddress(TC5_AddressDetails);
                assertTrue(status, "Failed to add a new address");
                status = checkout.selectAddress(TC5_AddressDetails);
                assertTrue(status, "Failed to add a new address");
                status = checkout.placeOrder();
                assertTrue(status, "Failed to place order");
                home.navigateToHomePage();
                status = home.performLogout();
                assertTrue(status, "Failed to perform logout");
        }

        /*
         * Testcase06: Verify the quantity of items in cart can be updated
         */
        @Test(description = "Verify that the contents of the cart can be edited", priority = 6, groups = {
                        "Regression_Test" }, dataProvider = "data-provider", dataProviderClass = DP.class)
        @Parameters({ "TC6_ProductNameToSearch1", "TC6_ProductNameToSearch2" })
        public void TestCase06(String TC6_ProductNameToSearch1, String TC6_ProductNameToSearch2)
                        throws InterruptedException {
                Boolean status;
                Register register = new Register(driver);
                register.navigateToRegisterPage();
                status = register.registerUser("testuser", "testuser@123", true);
                assertTrue(status, "Failed to register new user");
                Login login = new Login(driver);
                login.navigateToLoginPage();
                lastGeneratedUserName = register.lastGeneratedUsername;
                status = login.PerformLogin(lastGeneratedUserName, "testuser@123");
                assertTrue(status, "Failed to login new user");
                Home home = new Home(driver);
                home.navigateToHomePage();
                status = home.searchForProduct(TC6_ProductNameToSearch1);
                assertTrue(status, "Search for product failed");
                status = home.addProductToCart(TC6_ProductNameToSearch1);
                assertTrue(status, "Failed to add product to cart");
                status = home.searchForProduct(TC6_ProductNameToSearch2);
                assertTrue(status, "Search for product failed");
                status = home.addProductToCart(TC6_ProductNameToSearch2);
                assertTrue(status, "Failed to add product to cart");
                status = home.changeProductQuantityinCart(TC6_ProductNameToSearch1, 3);
                assertTrue(status, "Failed to change the quantity");
                status = home.changeProductQuantityinCart(TC6_ProductNameToSearch2, 3);
                assertTrue(status, "Failed to change the quantity");
                status = home.changeProductQuantityinCart(TC6_ProductNameToSearch1, 0);
                assertTrue(status, "Failed to change the quantity");
                status = home.clickCheckout();
                assertTrue(status, "Failed to click on checkout button");
                Checkout checkout = new Checkout(driver);
                status = checkout.addNewAddress("asdfghjkldfghjkasdfghjkl");
                assertTrue(status, "Failed to add a new address");
                status = checkout.selectAddress("asdfghjkldfghjkasdfghjkl");
                assertTrue(status, "Failed to add a new address");
                status = checkout.placeOrder();
                assertTrue(status, "Failed to place order");
                home.navigateToHomePage();
                status = home.performLogout();
                assertTrue(status, "Failed to perform logout");
        }

        /*
         * Testcase07: Verify that the cart contents are persisted after logout
         */
        @Test(description = "Verify that the contents made to the cart are saved against the user's login details", priority = 7, groups = {
                        "Regression_Test" }, dataProvider = "data-provider", dataProviderClass = DP.class)
        @Parameters("TC7_ListOfProductsToAddToCart")
        public void TestCase07(String TC7_ListOfProductsToAddToCart)
                        throws InterruptedException {
                Boolean status;
                List<String> expectedResult = Arrays.asList(TC7_ListOfProductsToAddToCart.split(";"));
                Register register = new Register(driver);
                register.navigateToRegisterPage();
                status = register.registerUser("testuser", "testuser@123", true);
                assertTrue(status, "Failed to register new user");
                Login login = new Login(driver);
                login.navigateToLoginPage();
                lastGeneratedUserName = register.lastGeneratedUsername;
                status = login.PerformLogin(lastGeneratedUserName, "testuser@123");
                assertTrue(status, "Failed to login new user");
                Home home = new Home(driver);
                home.navigateToHomePage();
                for (String p : expectedResult) {
                        status = home.searchForProduct(p);
                        assertTrue(status, "Search for product failed");
                        status = home.addProductToCart(p);
                        assertTrue(status, "Failed to add product to cart");
                }
                home.performLogout();
                assertTrue(status, "Failed to perform logout");
                login.navigateToLoginPage();
                status = login.PerformLogin(lastGeneratedUserName, "testuser@123");
                assertTrue(status, "Failed to login new user");
                status = home.verifyCartContents(expectedResult);
                assertTrue(status, "Failed to verify cart contents");
                home.performLogout();
                assertTrue(status, "Failed to perform logout");
        }

        /*
         * Testcase08: Verify insufficient balance message is shown when order price is
         * more than
         * wallet balance
         */
        @Test(description = "Verify that insufficient balance error is thrown when the wallet balance is not enough", priority = 8, groups = {
                        "Sanity_test" }, dataProvider = "data-provider", dataProviderClass = DP.class)
        @Parameters({ "TC8_ProductName", "TC8_Qty" })
        public void TestCase08(String TC8_ProductName, int TC8_Qty)
                        throws InterruptedException {
                Boolean status;
                Register register = new Register(driver);
                register.navigateToRegisterPage();
                status = register.registerUser("testuser", "testuser@123", true);
                assertTrue(status, "Failed to register new user");
                Login login = new Login(driver);
                login.navigateToLoginPage();
                lastGeneratedUserName = register.lastGeneratedUsername;
                status = login.PerformLogin(lastGeneratedUserName, "testuser@123");
                assertTrue(status, "Failed to login new user");
                Home home = new Home(driver);
                home.navigateToHomePage();
                status = home.searchForProduct(TC8_ProductName);
                assertTrue(status, "Search for product failed");
                status = home.addProductToCart(TC8_ProductName);
                assertTrue(status, "Failed to add product to cart");
                status = home.changeProductQuantityinCart(TC8_ProductName, TC8_Qty);
                assertTrue(status, "Failed to change the quantity");
                status = home.clickCheckout();
                assertTrue(status, "Failed to click on checkout button");
                Checkout checkout = new Checkout(driver);
                status = checkout.addNewAddress("asdfghjkldfghjkasdfghjkl");
                assertTrue(status, "Failed to add a new address");
                status = checkout.selectAddress("asdfghjkldfghjkasdfghjkl");
                assertTrue(status, "Failed to add a new address");
                status = checkout.placeOrder();
                assertFalse(status, "Failed to place order");
                status = checkout.verifyInsufficientBalanceMessage();
                assertTrue(status, "Failed to verify the insufficient balance message");
                home.navigateToHomePage();
                status = home.performLogout();
                assertTrue(status, "Failed to perform logout");
        }

        /*
         * Testcase09: Verify that product added to cart is available when a new tab is
         * opened
         */
        @Test(description = "Verify that a product added to a cart is available when a new tab is added", priority = 10, dependsOnMethods = {
                        "TestCase10" }, groups = { "Regression_Test" })
        public void TestCase09() throws InterruptedException {
                Boolean status;
                List<String> expectedResult = Arrays.asList("Stylecon 9 Seater RHS Sofa Set",
                                "Xtend Smart Watch");
                Register register = new Register(driver);
                register.navigateToRegisterPage();
                status = register.registerUser("testuser", "testuser@123", true);
                assertTrue(status, "Failed to register new user");
                Login login = new Login(driver);
                login.navigateToLoginPage();
                lastGeneratedUserName = register.lastGeneratedUsername;
                status = login.PerformLogin(lastGeneratedUserName, "testuser@123");
                assertTrue(status, "Failed to login new user");
                Home home = new Home(driver);
                home.navigateToHomePage();
                status = home.searchForProduct("Stylecon 9 Seater RHS Sofa Set");
                assertTrue(status, "Search for product failed");
                status = home.addProductToCart("Stylecon 9 Seater RHS Sofa Set");
                assertTrue(status, "Failed to add product to cart");
                status = home.searchForProduct("Xtend Smart Watch");
                assertTrue(status, "Search for product failed");
                status = home.addProductToCart("Xtend Smart Watch");
                // opening a new taband switching to it.
                String parentTab = driver.getWindowHandle();
                driver.switchTo().newWindow(WindowType.TAB);
                login.navigateToLoginPage();
                status = login.PerformLogin(lastGeneratedUserName, "testuser@123");
                assertTrue(status, "Failed to login new user");
                status = home.verifyCartContents(expectedResult);
                assertTrue(status, "Failed to verify cart contents");
                home.performLogout();
                assertTrue(status, "Failed to perform logout");
                driver.close();
                driver.switchTo().window(parentTab);
                home.performLogout();
                assertTrue(status, "Failed to perform logout");
        }

        /*
         * Testcase10: Verify that the Privacy Policy, About Us are displayed correctly
         */
        @Test(description = "Verify that privacy policy and about us links are working fine", priority = 9, groups = {
                        "Regression_Test" })
        public void TestCase10() throws InterruptedException {
                Boolean status;
                Home home = new Home(driver);
                home.navigateToHomePage();
                driver.findElement(By.xpath("//a[text()='Privacy policy']")).click();
                wait.until(ExpectedConditions.numberOfWindowsToBe(2));
                String parentTab = driver.getWindowHandle();
                Set<String> handles = driver.getWindowHandles();
                for (String s : handles) {
                        if (!s.equals(parentTab))
                                driver.switchTo().window(s);
                }
                wait.until(ExpectedConditions.textToBe(By.xpath("//h2"), "Privacy Policy"));
                driver.close();
                driver.switchTo().window(parentTab);
                status = driver.getWindowHandle().equals(parentTab);
                Assert.assertTrue(status,
                                "Failed to verify the presence of Privacy policy");
                driver.findElement(By.xpath("//a[text()='About us']")).click();
                wait.until(ExpectedConditions.numberOfWindowsToBe(2));
                handles = driver.getWindowHandles();
                for (String s : handles) {
                        if (!s.equals(parentTab))
                                driver.switchTo().window(s);
                }
                wait.until(ExpectedConditions.textToBe(By.xpath("//h2"), "About Us"));
                driver.close();
                driver.switchTo().window(parentTab);
                status = driver.getWindowHandle().equals(parentTab);
                Assert.assertTrue(status,
                                "Failed to verify the presence of About us");
        }

        /*
         * Testcase11: Verify that the Contact Us option is working correctly
         */
        @Test(description = "Verify that the contact us dialog works fine", priority = 11, groups = {
                        "Regression_Test" }, dataProvider = "data-provider", dataProviderClass = DP.class)
        @Parameters({ "TC11_ContactusUserName", "TC11_ContactUsEmail",
                        "TC11_QueryContent" })
        public void TestCase11(String TC11_ContactusUserName, String TC11_ContactUsEmail, String TC11_QueryContent)
                        throws InterruptedException {
                Home home = new Home(driver);
                home.navigateToHomePage();
                driver.findElement(By.xpath("//p[text()='Contact us']")).click();
                WebElement contactUsBlock = driver.findElement(By.className("card-block"));
                wait.until(ExpectedConditions.visibilityOf(contactUsBlock));
                WebElement nameField = driver.findElement(By.xpath("//input[contains(@placeholder, 'Name')]"));
                WebElement emailField = driver.findElement(By.xpath("//input[contains(@placeholder, 'Email')]"));
                WebElement msgField = driver.findElement(By.xpath("//input[contains(@placeholder, 'Message')]"));
                nameField.sendKeys(TC11_ContactusUserName);
                emailField.sendKeys(TC11_ContactUsEmail);
                msgField.sendKeys(TC11_QueryContent);
                wait.until(
                                ExpectedConditions.and(
                                                ExpectedConditions.attributeContains(nameField, "value",
                                                                TC11_ContactusUserName),
                                                ExpectedConditions.attributeContains(emailField, "value",
                                                                TC11_ContactUsEmail),
                                                ExpectedConditions.attributeContains(msgField, "value",
                                                                TC11_QueryContent)));
                driver.findElement(By.xpath("//button[text()=' Contact Now']")).click();
                wait.until(ExpectedConditions.invisibilityOf(contactUsBlock));
        }

        /*
         * Testcase12: Verify that the links on the QKART advertisement are clickable
         */
        @Test(description = "Ensure that the Advertisement Links on the QKART page are clickable", priority = 12, groups = {
                        "Sanity_test" })
        @Parameters({ "TC12_ProductNameToSearch", "TC12_AddresstoAdd" })
        public void TestCase12(String TC12_ProductNameToSearch, String TC12_AddresstoAdd)
                        throws InterruptedException {
                Boolean status;
                Register register = new Register(driver);
                register.navigateToRegisterPage();
                status = register.registerUser("testuser", "testuser@123", true);
                assertTrue(status, "Failed to register new user");
                Login login = new Login(driver);
                login.navigateToLoginPage();
                lastGeneratedUserName = register.lastGeneratedUsername;
                status = login.PerformLogin(lastGeneratedUserName, "testuser@123");
                assertTrue(status, "Failed to login new user");
                Home home = new Home(driver);
                home.navigateToHomePage();
                status = home.searchForProduct(TC12_ProductNameToSearch);
                assertTrue(status, "Search for product failed");
                status = home.addProductToCart(TC12_ProductNameToSearch);
                assertTrue(status, "Failed to add product to cart");
                status = home.clickCheckout();
                assertTrue(status, "Failed to click on checkout button");
                Checkout checkout = new Checkout(driver);
                status = checkout.addNewAddress(TC12_AddresstoAdd);
                assertTrue(status, "Failed to add a new address");
                status = checkout.selectAddress(TC12_AddresstoAdd);
                assertTrue(status, "Failed to add a new address");
                status = checkout.placeOrder();
                assertTrue(status, "Failed to place order");
                wait.until(ExpectedConditions.visibilityOfElementLocated(By.tagName("iframe")));
                for (int i = 0; i < 2; i++) {
                        driver.switchTo().frame(i);
                        WebElement buyNowBtn = driver.findElement(By.xpath("//button[text()='Buy Now']"));
                        status = buyNowBtn.isEnabled();
                        buyNowBtn.click();
                        wait.until(ExpectedConditions.urlContains("/checkout"));
                        driver.navigate().back();
                        wait.until(ExpectedConditions.visibilityOfElementLocated(By.tagName("iframe")));
                        driver.switchTo().parentFrame();
                }
                WebElement covidAdFrame = driver
                                .findElement(By.xpath(
                                                "//div[contains(@class,'css-92t6i8')]/following-sibling::iframe"));
                wait.until(ExpectedConditions.visibilityOf(covidAdFrame));
                driver.switchTo().frame(covidAdFrame);
                WebElement covidMsg = driver.findElement(By.xpath("//div[text()='COVID-19']"));
                status = covidMsg.isDisplayed();
                driver.switchTo().parentFrame();
                home.navigateToHomePage();
                status = home.performLogout();
                assertTrue(status, "Failed to perform logout");
        }

        /*
         * Close all the instances of WebDriver and the browser.
         */
        @AfterSuite(alwaysRun = true)
        public static void quitDriver() {
                System.out.println("quit()");
                driver.quit();
        }
}
